from pyspark.sql import SparkSession
from pyspark.ml.feature import MinHashLSH
from pyspark.ml.linalg import Vectors
from pyspark.sql.functions import col
import mmh3

TAM_SHINGLE = 10

def shingling_text(spark, text, tam):
    shingles = [text[i:i + tam] for i in range(len(text) - tam + 1)]

    hs = [mmh3.hash(item) for item in shingles]

    return hs

spark = SparkSession.builder.appName("Python Spark SQL basic example").config("spark.executor.memory", "16g").config("spark.driver.memory", "16g").getOrCreate()

arq = open("treino.txt").readlines()

items_list = []
for line in arq:
    line = line.split(",")
    idd = int(line[0])
    clazz = line[1]
    text = line[2]

    shingled = shingling_text(spark, text, 10)
    tam = sum(shingled)
    
    if(tam != 0):
        item = ( idd , clazz, Vectors.dense(shingled))
        items_list.append(item)


dfItems = spark.createDataFrame(items_list, ["id","class","features"])

mh = MinHashLSH(inputCol="features", outputCol="hashes", numHashTables=100)

model = mh.fit(dfItems)

transformed = model.transform(dfItems)

key = Vectors.dense([588414965, -952049420, 1945637026, 62283010, -640297684, -1705216729, -1307263763, 1812376213, 509779856, -629398207, -1884254145, -1399940728, 1494197938, -1822827457, -122081563, -701825851, 835050242, 561541220, -541408027, -587969566, -483032216, 566547603, 1618626119, -1227252338, -1894807754, 985145799, -1415078925, -1913762772, 620142393, -2070560100, -1768803150, 1587775276, -2080733671, 1263044188, 1224702829, -526047554, -1468939055, -733128795, 548360047, 1747063467, -876874727, -945908100, -469244029, -908174004, -1148342320, 1789661074, -768221840, 1481584061, 1368023846, 1874653409, 1171984066, 88999592, 524938519, 20505455, -482450485, -2067192228, 297405017, 1807363285, -554176618, 802753335, -1953497464, -1085128447, -723764359, 1803247502, 746436002, 370433241, 629167634, -2113518758, 2015017648, -580211784, -956514665, -807536902, 838417451, 421169981, -1847940242, 354675527, -886786961, 545480804, -1461514885, 759829151, -954272369, -785167814, 416602180, -1273612230, 1499958, -1484922969, -1066744391, -705700978, 675128192, -1205668202, 777455086, -600787488, -850477412, 241535905, 1201016781, 1618077927, 2016355622, -1528118399, 661681888, -565824104, 1809466269, 1325405469, 377053299, 687529654, 1148775174, 1162173967, 35397987, 1207050161, -1303962038, -235387597, -1844372802, 1229881789, -1134733416, 301339638, 1118996748, -829496497, 1903525257, -9555099, 1943586416, 696207912, 644257862, 1095599160, 1321233502, -1842028595, 605886288, 1434246082, 1429073322, 994330584, -2114342469, 1676526831, 1243185923, 140356543, -723248039, -596916422, 354746024, 1721038030, -303242923, 1293507603, -1349041519, 1688716499, 562291426, 1581443508, 1739651100, 886846014, -1900002130, -582455454, 1062587700, -189102156, -1908563430, 1442472380, -1906526495, -489091171, -1097484106, -1024542041, -667852235, -709822545, -2019173889, 1320344440, -1063085497, -863471312, 1007175336, -1205668202, 777455086, -600787488, -850477412, -264108419, 1794319197, 1973389746, -1237897814, 1953895240, 784192908, -908327189, 1700811071, 1784702481, 194339367, 1155342956, -896221612, 1577129102, 440389842, 1149551418, -1264990830, -437171952, 492800671, 1656615250, -968199006, -1436562011, 361602097, 448888191, -1515602716, -1732417329, -508948272, 804666411, -202617723, 1722684007, 1247897894, -492192527, 1751308012, 2003235882, 1000378359, 1835310437, -667063987, 148217358, 1857273843, -533228181, 1952743523, -1077008211, -673187943, -2071855400, -1335012457, 1715170507, 1715170507, 1715170507, -644525866, 2097813992, 1703160403, -898850326, -507361028, -1909164300, 1255655974, 558920099, 2063950124, 2146072847, 531220308, -900325448, 1248937497, -1562661268, 1715170507, 1715170507, 1715170507, 1715170507, 1715170507, 1715170507, 1715170507, 1715170507, 1715170507, 1715170507, 1715170507, 1715170507, -702689247, -1161218909, 1911827321, -658497595, 2025404823, -1434085563, -1496704877, -1172445780, 1471421097, -1841914988, 1921164966, 927153081, 1178564468, -1465284231, -1023889677, 1944504164, -1825295111, -2057112824, 909908173, 188210102, -1420625659, 1450401484, -633289367, 895752100, -335802992, 436146538, 1221605568, -772629197, -298923832, 582887022, 1923935930, 155015012, 1964217125, -455620576, -64821950, 1715170507, 1715170507, -702689247, 1602073714, 425385349, 336463719, 179354968, 1362895500, -1605100397, 1596300810, -1387152116, -751939006, -1519858863, 1715170507, 1715170507, 1715170507, 1715170507, 1715170507, 1715170507, 1715170507, -250859571, -254328621, 518470550, -1810096766, 762411343, 1449299427, -32690970, 754840372, 1199391287, -1868091598, -1385366480, -1167135371, -1312835446, -1846991967, 438957264, -750626349, -1834714199, -387708890, 1896440527, 397905811, 365357719, 1196455393, 138498461, -1602210665, 734194388, 124611487, -1743919458, -695284142, -1683089979, 1536318403, 316915168, -1157584033, 2139935038, -986379751, -1300617089, -782202650, 2089323891, 1665440928, 1533403137, -1793654448, -2060117685, -1324585990, 4891459, -26330621, -401615382, -64788277, -1768064885, -1256843985, -342617939, -583691491, 2108697744, 507294781, -783130605, 1715170507, 1715170507, 1715170507, 1715170507, 1715170507, 1715170507, 1715170507, 1891950943, -1682304000, 756130870, 1203328483, -1980222066, 1553371715, -647663190, 930077093, -266798511, -862847737, 1827290888, 11595338, 791791621, 639153577, 1347333792, -1893989534, -188606283, -395674994, -2011785946, -992373067, -1310715723, 1114959679, 343543857, -1329468894, -1371952911, -1152614562, -462946361, 1571180864, 906311335, 396161462, -108618891, -933195404, 399349426, 157491059, -378956844, -1090051363, -1066524135, -1625798345, 388878593, 121276345, 350204575, 1071451761, 224130184, 655112062, 913101370, 143751929, 1261297105, 1206530414, -1431744789, 1923123060, -964863787, 1849321392, 1014148386, -1473399410, -859454386, -398700839, -1933572513, 441280940, -343206480, -1682879524, -1818974355, 1073523112, -1679267029, 225201503, -1635146471, 1499294306, -62470386, -1776933012, 381649597, 2129884782, -1353642928, -2144720501, -1641161916, -230282080])
#key = Vectors.sparse(6, [1, 3], [1.0, 1.0])
model.approxNearestNeighbors(transformed, key, 10).show()

#dfItems.show()

# dataA = [(0, Vectors.dense([1 , 2 , 3])),
#          (1, Vectors.dense([4, 5, 6, 7, 8, 9])),
#          (2, Vectors.dense([1, 4, 5]))]
# dfA = spark.createDataFrame(dataA, ["id", "features"])

# key = Vectors.sparse(3, [0, 1, 2], [1.0, 1.0, 1.0])

# mh = MinHashLSH(inputCol="features", outputCol="hashes", numHashTables=50)
# model = mh.fit(dfA)

# # Feature Transformation
# print("The hashed dataset where hashed values are stored in the column 'hashes':")
# model.transform(dfA).select("id","hashes").repartition(1).write.json("mydata")
# #df.write.csv('mycsv.csv')

# # Compute the locality sensitive hashes for the input rows, then perform approximate nearest
# # neighbor search.
# # We could avoid computing hashes by passing in the already-transformed dataset, e.g.
# # `model.approxNearestNeighbors(transformedA, key, 2)`
# # It may return less than 2 rows when not enough approximate near-neighbor candidates are
# # found.
# print("Approximately searching dfA for 2 nearest neighbors of the key:")
# model.approxNearestNeighbors(dfA, key, 2).show()

